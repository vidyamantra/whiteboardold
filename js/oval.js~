(
	function (window){
		var vcan = window.vcan; 
		
		/**
		 * @Class defined oval for drawing the object oval
		 *  methods initilized for creating oval object
		 *  the arc() function used to create the oval object
		 */
		vcan.oval = function (){
			return  {
				type : 'oval',
				
				/**
				 * initiates the properties to oval object
				 * @param obj the properties would initates on it
				 */
				init : function (obj){
					if(obj.width == undefined){
						obj.width = obj.rx * 2;
					}
					
					if(obj.height == undefined){
						obj.height = obj.ry * 2;
					}
					
					if(obj.borderColor == undefined){
						obj.borderColor = "#000000";
					}
					
					if(obj.fillColor != undefined){
						obj.fillStyle = obj.fillColor;
					}
					
					return obj;
				},
				
				
				/**
				 * it draws the oval object 
				 * @param ctx current context of canvas
				 * @param obj contains the information eg: x, y, rx, ry
				 */
				orginal_draw : function (ctx, obj, noTransform){
					//debugger;
					ctx.beginPath();
					ctx.save();
				    // move from center (of virtual box) to its left/top corner
					var startingPoint = 0;
					var endingPoint = 2 * Math.PI;
					var counterClockWise = false;
					
					ctx.lineWidth = obj.lineWidth;
					ctx.transform(1, 0, 0, obj.ry/obj.rx, 0, 0);
					ctx.arc(noTransform ? obj.x : 0, noTransform ? obj.y : 0, obj.rx, 0, endingPoint, counterClockWise);
					ctx.closePath();
					
					if(obj.fillStyle != undefined){
						ctx.fillStyle = obj.fillStyle;
						ctx.fill();
					}
					
					if(obj.borderColor != undefined){
						ctx.fillStyle = obj.borderColor;
						ctx.stroke();
					}
				
					ctx.restore();
				},
				
				
				draw : function (ctx, obj, noTransform){
					ctx.beginPath();
					ctx.save();
					var startingPoint = 0;
					var endingPoint = 2 * Math.PI;
					var counterClockWise = false;
					
					ctx.lineWidth = obj.lineWidth;
					
					ctx.transform(1, 0, 0, obj.ry/obj.rx, 0, 0);
					
					//ctx.setTransform(1, 0, 0, obj.ry/obj.rx, 0, 0);
					ctx.arc(noTransform ? obj.x : 0, noTransform ? obj.y : 0, obj.rx, 0, endingPoint, counterClockWise);
					
					
					if(obj.fillStyle != undefined){
						ctx.fillStyle = obj.fillStyle;
						ctx.fill();
					}
					    
					if(obj.borderColor != undefined){
						ctx.fillStyle = obj.borderColor;
						ctx.stroke();
					}

					ctx.closePath();
					ctx.restore();
				},
				
				rect_draw : function (ctx, obj, noTransform){
					//TODO
					// this funciton should be done through the proper process
				     var   x = -obj.width / 2,
			          y = -obj.height / 2,
			          w = obj.width,
			          h = obj.height;
						  

				      ctx.beginPath();
				      
				      ctx.strokeStyle = (obj.borderColor !=  undefined) ? '"' + obj.strokeColor + '"' : "#000";
				      
				      //alert(ctx.strokeStyle);
				      
				      ctx.moveTo(x, y);
				      ctx.stroke();
				    
				      ctx.lineTo(x+w, y);
				      ctx.stroke();
				    
				      ctx.lineTo(x+w, y+h);
				      ctx.stroke();
				    
				      ctx.lineTo(x,y+h);
				      ctx.stroke();
				     
				      ctx.lineTo(x,y);
				      ctx.fillStyle = (obj.fillColor !=  undefined) ? obj.fillColor : " " ;
				      
				      ctx.closePath();
				      ctx.stroke();
				      // todo this should be enable
				      if( obj.fillColor != undefined){
				    	  ctx.fillStyle = obj.fillColor;
				    	  ctx.fill();
				      }
				}
			};
		}
	}
)(window);